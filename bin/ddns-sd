#!/usr/bin/env ruby

# frozen_string_literal: true

require 'ddnssd/system'
require 'logger'

Thread.abort_on_exception

logger = Logger.new($stderr)
logger.level = Logger.const_get((ENV['DDNSSD_LOG_LEVEL'] || "INFO").upcase)

if ENV['DDNSSD_DEBUG_MODULES'] && ENV['DDNSSD_DEBUG_MODULES'] != ""
  require 'filtered_debug_logger'
  Logger.prepend(FilteredDebugLogger)
  logger.permitted_prognames = ENV['DDNSSD_DEBUG_MODULES'].split(/,\s*/)
end

if ENV['DDNSSD_DISABLE_LOG_TIMESTAMPS']
  logger.formatter = ->(s, t, p, m) { "#{s[0]} #{p} #{m}\n" }
else
  logger.formatter = ->(s, t, p, m) { "#{t.strftime("%Y-%m-%d %H:%M:%S")} #{s[0]} #{p} #{m}\n" }
end

sig_r, sig_w = IO.pipe

Signal.trap("USR1") do
  sig_w.print '1'
end

Signal.trap("USR2") do
  sig_w.print '2'
end

Signal.trap("TERM") do
  sig_w.print 'T'
end

Signal.trap("HUP") do
  sig_w.print 'H'
end

begin
  system = DDNSSD::System.new(ENV, logger: logger)

  Thread.new do
    loop do
      c = sig_r.getc
      if c == 'T'
        logger.info($0) { "Received SIGTERM." }
        system.shutdown(true)
      elsif c == 'H'
        logger.info($0) { "Received SIGHUP." }
        system.shutdown(false)
      elsif c == '1'
        logger.level -= 1 unless logger.level == Logger::DEBUG
        logger.info($0) { "Received SIGUSR1; log level is now #{Logger::SEV_LABEL[logger.level]}." }
      elsif c == '2'
        logger.level += 1 unless logger.level == Logger::ERROR
        logger.info($0) { "Received SIGUSR2; log level is now #{Logger::SEV_LABEL[logger.level]}." }
      else
        logger.error($0) { "Got an unrecognised character from signal pipe: #{c.inspect}" }
      end
    end
  end

  system.run
rescue DDNSSD::Config::InvalidEnvironmentError => ex
  $stderr.puts "F Invalid configuration: #{ex.message}"
  exit 1
end
